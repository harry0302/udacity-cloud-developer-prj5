org: harry0302
app: udacity-cloud-developer-prj5
service: udacity-cloud-developer-prj5
frameworkVersion: "3"

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing: true

  environment:
    JWT_SECRET: hell0W0rd#kkwiernc!
    TOKEN_EXPIRATION: 2
    USERS_TABLE: Users-${self:provider.stage}
    USERS_BY_EMAIL_INDEX: UserEmailIndex
    POSTS_TABLE: Posts-${self:provider.stage}
    POSTS_BY_UPDATED_AT_INDEX: PostUpdatedAtIndex
    POSTS_BY_AUTHOR_INDEX: PostAuthorIndex
  logs:
    restApi: true

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"

custom:
  serverless-iam-roles-per-function:
    defaultInherit: true

functions:
  Auth:
    handler: src/security/authorizer.handler

  Signup:
    handler: src/controller/auth.signup
    events:
      - http:
          method: POST
          path: auth/signup
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Query"
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*"

  Signin:
    handler: src/controller/auth.signin
    events:
      - http:
          method: POST
          path: auth/signin
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"

  CreatePost:
    handler: src/controller/post.createPost
    events:
      - http:
          method: post
          path: post
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}"

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USERS_BY_EMAIL_INDEX}
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
          - AttributeName: author
            AttributeType: S
          - AttributeName: updatedAt
            AttributeType: S  
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.POSTS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.POSTS_BY_AUTHOR_INDEX}
            KeySchema:
              - AttributeName: author
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.POSTS_BY_UPDATED_AT_INDEX}
            KeySchema:
              - AttributeName: postId
                KeyType: HASH
              - AttributeName: updatedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
