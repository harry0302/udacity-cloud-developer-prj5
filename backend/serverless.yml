org: harry0302
app: udacity-cloud-developer-prj5
service: udacity-cloud-developer-prj5
frameworkVersion: "3"

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing: true

  environment:
    JWT_SECRET: hell0W0rd#kkwiernc!
    TOKEN_EXPIRATION: 1h
    USERS_TABLE: Users-4-${self:provider.stage}
    USERS_BY_EMAIL_INDEX: UserEmailIndex
    USERS_BY_USERNAME_INDEX: UserUsernameIndex
    ARTICLES_TABLE: Articles-4-${self:provider.stage}
    ARTICLES_BY_UPDATED_AT_INDEX: ArticleUpdatedAtIndex
    ARTICLES_BY_AUTHOR_INDEX: ArticleAuthorIndex
    COMMENTS_TABLE: Comments-4-${self:provider.stage}
    COMMENTS_BY_ARTICLE_INDEX: CommentArticleIndex
    TAGS_TABLE: Tags-4-${self:provider.stage}
    ATTACHMENT_S3_BUCKET: serverless-c5-harry0302-attachment-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
  logs:
    restApi: true

custom:
  serverless-iam-roles-per-function:
    defaultInherit: true

functions:
  Auth:
    handler: src/lambda/auth/jwtAuthorizer.handler

  Signup:
    handler: src/lambda/http/signup.handler
    events:
      - http:
          method: POST
          path: api/users
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Query"
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  Signin:
    handler: src/lambda/http/signin.handler
    events:
      - http:
          method: POST
          path: api/users/login
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Query"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  GetUser:
    handler: src/lambda/http/getUser.handler
    events:
      - http:
          method: GET
          path: api/user
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Query"
          - "dynamodb:GetItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  UpdateUser:
    handler: src/lambda/http/updateUser.handler
    events:
      - http:
          method: PUT
          path: api/user
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Query"
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  GetProfile:
    handler: src/lambda/http/getProfile.handler
    events:
      - http:
          method: GET
          path: api/profiles/{username}
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  FollowUser:
    handler: src/lambda/http/followUser.handler
    events:
      - http:
          method: POST
          path: api/profiles/{username}/follow
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  UnfollowUser:
    handler: src/lambda/http/unfollowUser.handler
    events:
      - http:
          method: DELETE
          path: api/profiles/{username}/follow
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  CreateArticle:
    handler: src/lambda/http/createArticle.handler
    events:
      - http:
          method: post
          path: api/articles
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ARTICLES_TABLE}"
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TAGS_TABLE}
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  GetArticles:
    handler: src/lambda/http/getArticles.handler
    events:
      - http:
          method: get
          path: api/articles
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ARTICLES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ARTICLES_TABLE}/index/*"
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  GetArticlesFeed:
    handler: src/lambda/http/getArticlesFeed.handler
    events:
      - http:
          method: GET
          path: /api/articles/feed
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ARTICLES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ARTICLES_TABLE}/index/*"
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  GetArticle:
    handler: src/lambda/http/getArticle.handler
    events:
      - http:
          method: get
          path: api/articles/{slug}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ARTICLES_TABLE}
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  UdpateArticle:
    handler: src/lambda/http/updateArticle.handler
    events:
      - http:
          method: PUT
          path: api/articles/{slug}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
          - "dynamodb:GetItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ARTICLES_TABLE}"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ARTICLES_TABLE}/index/*"
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TAGS_TABLE}
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  DeleteArticle:
    handler: src/lambda/http/deleteArticle.handler
    events:
      - http:
          method: DELETE
          path: api/articles/{slug}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ARTICLES_TABLE}
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  FavoriteArticle:
    handler: src/lambda/http/favoriteArticle.handler
    events:
      - http:
          method: POST
          path: /api/articles/{slug}/favorite
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ARTICLES_TABLE}
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  UnfavoriteArticle:
    handler: src/lambda/http/unfavoriteArticle.handler
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}/favorite
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ARTICLES_TABLE}
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  GetTags:
    handler: src/lambda/http/getTags.handler
    events:
      - http:
          method: GET
          path: api/tags
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TAGS_TABLE}
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
  CreateComment:
    handler: src/lambda/http/createComment.handler
    events:
      - http:
          method: POST
          path: api/articles/{slug}/comments
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  GetComments:
    handler: src/lambda/http/getComments.handler
    events:
      - http:
          method: GET
          path: api/articles/{slug}/comments
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}/index/*"
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  DeleteComment:
    handler: src/lambda/http/deleteComment.handler
    events:
      - http:
          method: DELETE
          path: api/articles/{slug}/comments/{id}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: get
          path: api/articles/{slug}/upload
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ARTICLES_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
    
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USERS_BY_EMAIL_INDEX}
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    ArticlesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: slug
            AttributeType: S
          - AttributeName: author
            AttributeType: S
          - AttributeName: dummy
            AttributeType: S
          - AttributeName: updatedAt
            AttributeType: N  
        KeySchema:
          - AttributeName: slug
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ARTICLES_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ARTICLES_BY_AUTHOR_INDEX}
            KeySchema:
              - AttributeName: author
                KeyType: HASH
              - AttributeName: slug
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.ARTICLES_BY_UPDATED_AT_INDEX}
            KeySchema:
              - AttributeName: dummy
                KeyType: HASH
              - AttributeName: updatedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    CommentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: commentId
            AttributeType: S
          - AttributeName: author
            AttributeType: S
          - AttributeName: slug
            AttributeType: S
        KeySchema:
          - AttributeName: commentId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.COMMENTS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.COMMENTS_BY_ARTICLE_INDEX}
            KeySchema:
              - AttributeName: slug
                KeyType: HASH
              - AttributeName: author
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    TagsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: tagName
            AttributeType: S
        KeySchema:
          - AttributeName: tagName
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TAGS_TABLE}
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    AttachmentsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket